{"version":3,"sources":["webpack:///webpack/bootstrap 9c9cb090945ac76a5528","webpack:///D:/Education/LogicAndAlgorithmTheory/LogicCalculator/public/js/index.js","webpack:///D:/Education/LogicAndAlgorithmTheory/LogicCalculator/lib/logicCalculator.js","webpack:///D:/Education/LogicAndAlgorithmTheory/LogicCalculator/lib/parser.js"],"names":[],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9c9cb090945ac76a5528\n **/","'use strict';\n\nimport LogicCalculator from './../../lib/logicCalculator';\n\n/**\n * The {{#exists}} helper checks if a variable is defined.\n */\nHandlebars.registerHelper('exists', function (variable, options) {\n    if (typeof variable !== 'undefined') {\n        return options.fn(this);\n    }\n});\n\n$(() => {\n    const $source = $('#truth-table').html();\n    const template = Handlebars.compile($source);\n\n    const $alert = $('.alert');\n    const $tabs = $('.tabs');\n\n    const $form = $('form');\n    const $input1 = $form.find('input:nth-child(1)');\n    const $input2 = $form.find('input:nth-child(2)');\n\n    $form.on('keypress', (e) => {\n        // Continue if only enter is pressed.\n        if (e.keyCode !== 13) {\n            return;\n        }\n\n        if ($input1.val().length === 0 && $input2.val().length === 0) {\n            $tabs.hide();\n            return;\n        }\n\n        handler($input1);\n        handler($input2);\n    });\n\n    function handler($this) {\n        try {\n            const text = $this.val();\n            const $target = $($this.attr('data-target'));\n            if (text.length === 0) {\n                $target.html('');\n                return;\n            }\n\n            // Build truth table.\n            const calc = new LogicCalculator(text);\n\n            const info = {};\n            let truthTable = calc.truthTable();\n\n            if (calc.isIdenticallyTrue) {\n                info.functionType = 'identically-true, doable';\n            } else if (calc.isIdenticallyFalse) {\n                info.functionType = 'identically-false, rebuttable';\n            } else {\n                info.functionType = 'doable, rebuttable';\n            }\n\n            info.pcnf = calc.pcnf();\n            info.pdnf = calc.pdnf();\n            info.mdnf = calc.mdnf();\n            info.mcnf = calc.mcnf();\n\n            info.selfDual = calc.isSelfDual() ?\n                'Self dual function.' :\n                'Not self dual function.';\n\n            const text2 = $this.siblings('input').val();\n            if (text2.length !== 0) {\n                info.dual = calc.isDual(\n                    new LogicCalculator(text2).truthTable()\n                );\n            }\n\n            // Output truth table and function properties.\n            const context = {\n                table: {\n                    titleCells: calc.varsNames,\n                    rows: truthTable\n                },\n                info\n            };\n            const html = template(context);\n\n            $target.html(html);\n            $tabs.show();\n\n            $alert.text('').removeClass('alert-danger');\n        } catch (e) {\n            let text = e.message;\n            if (e.name === 'SyntaxError') {\n                text = `${e.location.start.line}.${e.location.start.column}: ` +\n                    `${e.message}`;\n            }\n\n            $alert\n                .addClass('alert-danger')\n                .text(text);\n\n            $tabs.hide();\n        }\n    }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** D:/Education/LogicAndAlgorithmTheory/LogicCalculator/public/js/index.js\n **/","'use strict';\n\nimport parser from './parser';\n\n/**\n * Replace the character at the specified index.\n * @param {int} index\n * @param {string} character\n * @returns {string}\n */\nString.prototype.replaceAt = function (index, character) {\n    return this.substr(0, index) + character +\n        this.substr(index + character.length);\n};\n\n/**\n * Logic calculator class.\n */\nexport default class LogicCalculator {\n    /**\n     * Construct LogicCalculator.\n     * @param {string} text\n     */\n    constructor(text) {\n        let parseResult = parser.parse(text);\n        this.ast = parseResult.ast;\n        this.varsNames = parseResult.varsNames;\n        this._truthTable = [];\n\n        this.isIdenticallyTrue = null;\n        this.isIdenticallyFalse = null;\n        this.isRebuttable = null;\n        this.isDoable = null;\n\n        this._isSelfDual = null;\n\n        this._pcnf = null;\n        this._pdnf = null;\n        this._mcnf = null;\n        this._mdnf = null;\n\n        this.truthTable();\n    }\n\n    /**\n     * Get truth table.\n     * @returns {Array}\n     */\n    truthTable() {\n        if (this._truthTable.length) {\n            return this._truthTable;\n        }\n\n        if (this.varsNames.length === 0) {\n            const result = Number(LogicCalculator.calc(this.ast));\n            this._isSelfDual = true;\n            if (result === 1) {\n                this.isIdenticallyTrue = true;\n                this.isDoable = true;\n                this.isIdenticallyFalse = false;\n                this.isRebuttable = false;\n                this._pcnf = '1';\n                this._pdnf = '1';\n                this._mcnf = '1';\n                this._mdnf = '1';\n            } else {\n                this.isIdenticallyTrue = false;\n                this.isDoable = false;\n                this.isIdenticallyFalse = true;\n                this.isRebuttable = true;\n                this._pcnf = '0';\n                this._pdnf = '0';\n                this._mcnf = '0';\n                this._mdnf = '0';\n            }\n            this._truthTable = [[result]];\n            return this._truthTable;\n        }\n\n        let rows = [];\n        let rowsAmount = Math.pow(2, this.varsNames.length);\n\n        this.isIdenticallyTrue = true;\n        let isntAlwaysFalse = false;\n\n        for (let i = 0; i < rowsAmount; ++i) {\n            let binString = Number(i).toString(2);\n            if (binString.length !== this.varsNames.length) {\n                let diff = this.varsNames.length - binString.length;\n                binString = new Array(diff + 1).join('0') + binString;\n            }\n\n            let numbers = [];\n            let binStringLength = binString.length;\n            for (let j = 0; j < binStringLength; ++j) {\n                numbers.push(Number(binString[j]));\n            }\n\n            let vars = {};\n            let counter = 0;\n            this.varsNames.forEach((value) => {\n                vars[value] = numbers[counter++];\n            });\n\n            let result = Number(LogicCalculator.calc(this.ast, {vars}));\n            numbers.push(result);\n            rows.push(numbers);\n\n            this.isIdenticallyTrue = this.isIdenticallyTrue && result;\n            isntAlwaysFalse = isntAlwaysFalse || result;\n        }\n\n        this._truthTable = rows;\n\n        if (this.isIdenticallyTrue) {\n            this.isDoable = true;\n            this.isRebuttable = false;\n            this.isIdenticallyFalse = false;\n        } else if (!isntAlwaysFalse) {\n            this.isIdenticallyFalse = true;\n            this.isRebuttable = true;\n            this.isDoable = false;\n        } else {\n            this.isIdenticallyFalse = false;\n            this.isDoable = true;\n            this.isRebuttable = true;\n        }\n\n        return rows;\n    }\n\n    /**\n     * Calculate logical expression.\n     * @param {object} ast\n     * @param {object} context\n     * @returns {boolean}\n     */\n    static calc(ast, context) {\n        let vars = typeof context === 'object' ? context.vars : {};\n        let nodeType = ast.type;\n        let result;\n\n        switch (nodeType) {\n            case 'variable':\n                result = vars[ast.value];\n                break;\n            case 'digit':\n                result = !!ast.value;\n                break;\n            case 'negation':\n                result = !this.calc(ast.child, context);\n                break;\n            case 'or':\n                result = this.calc(ast.left, context);\n                ast.right.forEach((node) => {\n                    result |= this.calc(node, context);\n                });\n                break;\n            case 'and':\n                result = this.calc(ast.left, context);\n                ast.right.forEach((node) => {\n                    result &= this.calc(node, context);\n                });\n                break;\n            case 'implication':\n                result = this.calc(ast.left, context);\n                ast.right.forEach((node) => {\n                    result = !result || this.calc(node, context);\n                });\n                break;\n            case 'equivalence':\n                let leftResult = this.calc(ast.left, context);\n                ast.right.forEach((node) => {\n                    let rightResult = this.calc(node, context);\n                    result = (!leftResult || rightResult) &&\n                        (leftResult || !rightResult);\n                    leftResult = rightResult;\n                });\n                break;\n        }\n\n        return result;\n    }\n\n    /**\n     * Get perfect conjunctive normal form of truth table.\n     * @returns {string}\n     */\n    pcnf() {\n        if (this._pcnf !== null) {\n            return this._pcnf;\n        }\n\n        this._pcnf = this.pnf(0, '|', '&');\n\n        return this._pcnf;\n    }\n\n    /**\n     * Get perfect disjunctive normal form of truth table.\n     * @returns {string}\n     */\n    pdnf() {\n        if (this._pdnf !== null) {\n            return this._pdnf;\n        }\n\n        this._pdnf = this.pnf(1, '&', '|');\n\n        return this._pdnf;\n    }\n\n    /**\n     * Get normal form.\n     * @param {int} digit\n     * @param {string} char1\n     * @param {string} char2\n     * @returns {string}\n     */\n    pnf(digit, char1, char2) {\n        let varsAmount = Math.log2(this._truthTable.length);\n        let result = '';\n\n        let rowsAmount = this._truthTable.length;\n        this._truthTable.forEach((row, index) => {\n            if (row[varsAmount] === digit) {\n                result += '(';\n\n                let length = row.length;\n                for (let i = 0; i < length - 1; ++i) {\n                    if (row[i] === digit) {\n                        result += this.varsNames[i];\n                    } else {\n                        result += '!' + this.varsNames[i];\n                    }\n\n                    if (i !== length - 2) {\n                        result += char1;\n                    }\n                }\n\n                result += ')';\n\n                if (index !== rowsAmount - 1) {\n                    result += char2;\n                }\n            }\n        });\n\n        if (result === '') {\n            result = '1';\n        } else {\n            result = result[result.length - 1] === char2 ?\n                result.substring(0, result.length - 1) :\n                result;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the function is self-dual.\n     * @returns {boolean}\n     */\n    isSelfDual() {\n        if (this._isSelfDual !== null) {\n            return this._isSelfDual;\n        }\n\n        let length = this._truthTable.length;\n        let varsAmount = Math.log2(length);\n\n        let middle = length / 2;\n        for (let i = 0; i < length / 2; ++i) {\n            if (this._truthTable[i][varsAmount] ===\n                this._truthTable[middle + i][varsAmount]) {\n                this._isSelfDual = false;\n                return false;\n            }\n        }\n\n        this._isSelfDual = true;\n        return true;\n    }\n\n    /**\n     * Check if functions are dual.\n     * @param {Array} truthTable\n     * @returns {boolean}\n     */\n    isDual(truthTable) {\n        let length = this._truthTable.length;\n        if (length !== truthTable.length) {\n            return false;\n        }\n        let varsAmount = Math.log2(length);\n\n        for (let i = 0; i < length; ++i) {\n            if (this._truthTable[i][varsAmount] ===\n                truthTable[length - i - 1][varsAmount]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Get minimal disjunctive normal form.\n     * @returns {string}\n     */\n    mdnf() {\n        if (this._mdnf !== null) {\n            return this._mdnf;\n        }\n\n        let tmp = this._pdnf\n            .replace(/![a-zA-Z][a-zA-Z0-9]*/g, '0')\n            .replace(/[a-zA-Z][a-zA-Z0-9]*/g, '1')\n            .replace(/[\\(\\)&]/g, '')\n            .split('|');\n\n        let result = '';\n        if (tmp.length) {\n            let result2 = LogicCalculator.quineMcCluskey(tmp);\n            let h = this.varsNames;\n            let opsize = h.length;\n\n            for (let t of result2) {\n                let tmp2 = '';\n                for (let i = 0; i < opsize; ++i) {\n                    if (t[i] === '1') {\n                        tmp2 += h[i] + '&';\n                    } else if (t[i] === '0') {\n                        tmp2 += '!' + h[i] + '&';\n                    }\n                }\n\n                tmp2 = tmp2.slice(0, -1);\n                result += '(' + tmp2 + ')|';\n            }\n        }\n\n        this._mdnf = result.slice(0, -1);\n        return this._mdnf;\n    }\n\n    /**\n     * Get minimal conjunctive normal form.\n     * @returns {string}\n     */\n    mcnf() {\n        if (this._mcnf !== null) {\n            return this._mcnf;\n        }\n\n        debugger;\n        let tmp = this._pcnf\n            .replace(/![a-zA-Z][a-zA-Z0-9]*/g, '0')\n            .replace(/[a-zA-Z][a-zA-Z0-9]*/g, '1')\n            .replace(/[\\(\\)|]/g, '')\n            .split('&');\n\n        let result = '';\n        if (tmp.length) {\n            let result2 = LogicCalculator.quineMcCluskey(tmp);\n            let h = this.varsNames;\n            let opsize = h.length;\n\n            for (let t of result2) {\n                let tmp2 = '';\n                for (let i = 0; i < opsize; ++i) {\n                    if (t[i] === '1') {\n                        tmp2 += h[i] + '|';\n                    } else if (t[i] === '0') {\n                        tmp2 += '!' + h[i] + '|';\n                    }\n                }\n\n                tmp2 = tmp2.slice(0, -1);\n                result += '(' + tmp2 + ')&';\n            }\n        }\n\n        this._mcnf = result.slice(0, -1);\n        return this._mcnf;\n    }\n\n    /**\n     * Find minimal perfect form.\n     * @param {Array} constituents\n     * @returns {Array}\n     */\n    static quineMcCluskey(constituents) {\n        let groups = [];\n        for (let constituent of constituents) {\n            let index = (constituent.match(/1/g) || []).length;\n            if (!groups[index]) {\n                groups[index] = [];\n            }\n            groups[index].push(constituent + '+');\n        }\n\n        let primeImplicants = LogicCalculator.findPrimeImplicants(groups);\n        let table = [];\n        for (let i = 0; i < primeImplicants.length; ++i) {\n            table.push([]);\n            for (let j = 0; j < constituents.length; ++j) {\n                table[i].push(\n                    LogicCalculator.isCover(primeImplicants[i], constituents[j])\n                );\n            }\n        }\n\n        let result2 = LogicCalculator.petricMethod(table);\n        let result = [];\n        for (let i = 0; i < result2.length; ++i) {\n            if (result2[i] === '1') {\n                result.push(primeImplicants[i]);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Find deadlock normal form.\n     * @param {Array} table\n     * @returns {string}\n     */\n    static petricMethod(table) {\n        let I = [];\n        for (let i = 0; i < table.length; ++i) {\n            let tmp = new Array(table.length + 1).join('-');\n            tmp = tmp.replaceAt(i, '1');\n            I.push(tmp);\n        }\n\n        let product = [];\n        for (let i = 0; i < table.length; ++i) {\n            if (table[i][0]) {\n                product.push(I[i]);\n            }\n        }\n\n        for (let j = 1; j < table[0].length; ++j) {\n            let tmp = [];\n            let pp = product;\n            for (let i = 0; i < table.length; ++i) {\n                if (table[i][j]) {\n                    tmp.push(I[i]);\n                }\n            }\n\n            product = [];\n            for (let p of pp) {\n                for (let t of tmp) {\n                    let n = new Array(table.length + 1).join('-');\n                    for (let i = 0; i < t.length; ++i) {\n                        if (p[i] === '1' || t[i] === '1') {\n                            n = n.replaceAt(i, '1');\n                        }\n                    }\n\n                    let isAddN = true;\n                    let isDel = false;\n                    product.forEach((item, index, array) => {\n                        let resf = LogicCalculator.findPosToMinimize(\n                            item, n, n.length\n                        );\n                        if (resf !== -1 || item === n) {\n                            isAddN = false;\n                        }\n\n                        if (resf !== -1 &&\n                            (n.match(/1/g) || []).length <\n                            (item.match(/1/g) || []).length) {\n                            array.splice(index, 1);\n                            isDel = true;\n                        }\n                    });\n\n                    if (isAddN || isDel) {\n                        product.push(n);\n                    }\n                }\n            }\n        }\n\n        let imin = table.length + 1;\n        let result = '';\n        for (let p of product) {\n            if ((p.match(/1/g) || []).length < imin) {\n                result = p;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Find prime implicants.\n     * @param {Array} groups\n     * @returns {Array}\n     */\n    static findPrimeImplicants(groups) {\n        let n = groups[groups.length - 1][0].length - 1;\n        let result = [];\n        let isAllImplicantsFound = false;\n\n        while (!isAllImplicantsFound) {\n            isAllImplicantsFound = true;\n            let tmp = [];\n\n            // Try to minimize i and i + 1 groups.\n            for (let i = 0; i < groups.length; ++i) {\n                if (groups[i] === undefined) {\n                    continue;\n                }\n\n                tmp.push([]);\n                for (let gi = 0; gi < groups[i].length; ++gi) {\n                    for (let gj = 0;\n                         i + 1 < groups.length && gj < groups[i + 1].length;\n                         ++gj) {\n\n                        let pos = LogicCalculator.findPosToMinimize(\n                            groups[i][gi],\n                            groups[i + 1][gj],\n                            n\n                        );\n\n                        if (pos !== -1) {\n                            let newNotation = groups[i][gi];\n                            newNotation = newNotation.replaceAt(pos, '*');\n                            newNotation = newNotation.replaceAt(n, '+');\n\n                            if (tmp[tmp.length - 1]\n                                    .indexOf(newNotation) === -1) {\n                                tmp[tmp.length - 1].push(newNotation);\n                            }\n\n                            isAllImplicantsFound = false;\n                            groups[i][gi] = groups[i][gi].replaceAt(n, '-');\n                            groups[i + 1][gj] = groups[i + 1][gj]\n                                .replaceAt(n, '-');\n                        }\n                    }\n\n                    if (groups[i][gi][n] === '+') {\n                        result.push(groups[i][gi].slice(0, -1));\n                    }\n                }\n\n                if (tmp[tmp.length - 1].length === 0) {\n                    tmp.pop();\n                }\n            }\n\n            groups = tmp;\n        }\n\n        for (let i = 0; i < groups.length; ++i) {\n            for (let j = 0; j < groups[i].length; ++j) {\n                result.push(groups[i][j].slice(0, -1));\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Find position of glue.\n     * @param {string} a\n     * @param {string} b\n     * @param {int} n\n     * @returns {number}\n     */\n    static findPosToMinimize(a, b, n) {\n        let diff = 0;\n        let result = -1;\n\n        for (let i = 0; i < n; ++i) {\n            if (a[i] !== b[i]) {\n                ++diff;\n                result = i;\n            }\n        }\n\n        return diff === 1 ? result : -1;\n    }\n\n    /**\n     * Check if primeImplicant covers constituent.\n     * @param {String} primeImplicant\n     * @param {String} constituent\n     * @returns {boolean}\n     */\n    static isCover(primeImplicant, constituent) {\n        for (let i = 0; i < primeImplicant.length; ++i) {\n            if (!isNaN(parseInt(primeImplicant[i])) &&\n                primeImplicant[i] !== constituent[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nmodule.exports = LogicCalculator;\n\n\n\n/** WEBPACK FOOTER **\n ** D:/Education/LogicAndAlgorithmTheory/LogicCalculator/lib/logicCalculator.js\n **/","module.exports = (function() {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser  = this,\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = function(ast) {\n                return {\n                    ast: ast,\n                    varsNames: Array.from(varsNames).sort()\n                };\n            },\n        peg$c1 = \"<->\",\n        peg$c2 = { type: \"literal\", value: \"<->\", description: \"\\\"<->\\\"\" },\n        peg$c3 = function(first, rest) {\n                if (rest.length > 0) {\n                    return {\n                        type: 'equivalence',\n                        left: first,\n                        right: getExpression(rest)\n                    };\n                } else {\n                    return first;\n                }\n            },\n        peg$c4 = \"->\",\n        peg$c5 = { type: \"literal\", value: \"->\", description: \"\\\"->\\\"\" },\n        peg$c6 = function(first, rest) {\n                if (rest.length > 0) {\n                    return {\n                        type: 'implication',\n                        left: first,\n                        right: getExpression(rest)\n                    };\n                } else {\n                    return first;\n                }\n            },\n        peg$c7 = \"|\",\n        peg$c8 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n        peg$c9 = function(first, rest) {\n                if (rest.length > 0) {\n                    return {type: 'or', left: first, right: getExpression(rest)};\n                } else {\n                    return first;\n                }\n            },\n        peg$c10 = \"&\",\n        peg$c11 = { type: \"literal\", value: \"&\", description: \"\\\"&\\\"\" },\n        peg$c12 = function(first, rest) {\n                if (rest.length > 0) {\n                    return {type: 'and', left: first, right: getExpression(rest)};\n                } else {\n                    return first;\n                }\n            },\n        peg$c13 = \"(\",\n        peg$c14 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c15 = \")\",\n        peg$c16 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c17 = function(expr) {\n                return expr;\n            },\n        peg$c18 = \"!\",\n        peg$c19 = { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n        peg$c20 = function(exclamationPoints, expr) {\n                return exclamationPointsAreEven(exclamationPoints) ? expr : {\n                    type: 'negation',\n                    child: expr\n                };\n            },\n        peg$c21 = function(variable) {\n                return {\n                    type: 'variable',\n                    value: variable\n                };\n            },\n        peg$c22 = function(exclamationPoints, variable) {\n                return exclamationPointsAreEven(exclamationPoints) ? {\n                    type: 'variable',\n                    value: variable\n                } : {\n                    type: 'negation',\n                    child: {\n                        type: 'variable',\n                        value: variable\n                    }\n                }\n            },\n        peg$c23 = function(digit) {\n                return {\n                    type: 'digit',\n                    value: digit\n                };\n            },\n        peg$c24 = function(exclamationPoints, digit) {\n                return exclamationPointsAreEven(exclamationPoints) ? {\n                    type: 'digit',\n                    value: digit\n                } : {\n                    type: 'negation',\n                    child: {\n                        type: 'digit',\n                        value: digit\n                    }\n                }\n            },\n        peg$c25 = { type: \"other\", description: \"variable\" },\n        peg$c26 = /^[a-zA-Z]/,\n        peg$c27 = { type: \"class\", value: \"[a-zA-Z]\", description: \"[a-zA-Z]\" },\n        peg$c28 = /^[a-zA-Z0-9]/,\n        peg$c29 = { type: \"class\", value: \"[a-zA-Z0-9]\", description: \"[a-zA-Z0-9]\" },\n        peg$c30 = function(variable) {\n                varsNames.add(variable);\n                return variable;\n            },\n        peg$c31 = { type: \"other\", description: \"digit\" },\n        peg$c32 = /^[01]/,\n        peg$c33 = { type: \"class\", value: \"[01]\", description: \"[01]\" },\n        peg$c34 = function(digit) {\n                return digit == 0 ? false : true;\n            },\n        peg$c35 = { type: \"other\", description: \"whitespace\" },\n        peg$c36 = /^[ \\t\\n\\r]/,\n        peg$c37 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(\n        message,\n        null,\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p, ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0100-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1000-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsestart() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parseequivalenceExpr();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseequivalenceExpr() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$parseimplicationExpr();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c1) {\n            s5 = peg$c1;\n            peg$currPos += 3;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c2); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseimplicationExpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c1) {\n              s5 = peg$c1;\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c2); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseimplicationExpr();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseimplicationExpr() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$parseorExpr();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c4) {\n            s5 = peg$c4;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c5); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorExpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c4) {\n              s5 = peg$c4;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c5); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseorExpr();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c6(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseorExpr() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$parseandExpr();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 124) {\n            s5 = peg$c7;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseandExpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 124) {\n              s5 = peg$c7;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseandExpr();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c9(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseandExpr() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$parseparenthesisExpr();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 38) {\n            s5 = peg$c10;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c11); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparenthesisExpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 38) {\n              s5 = peg$c10;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c11); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseparenthesisExpr();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c12(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseparenthesisExpr() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c13;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c14); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseequivalenceExpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s5 = peg$c15;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c16); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c17(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        if (input.charCodeAt(peg$currPos) === 33) {\n          s3 = peg$c18;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c19); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (input.charCodeAt(peg$currPos) === 33) {\n              s3 = peg$c18;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s2 = peg$c13;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse_();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseequivalenceExpr();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parse_();\n                if (s5 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s6 = peg$c15;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c16); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c20(s1, s4);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          s2 = peg$parseVariable();\n          if (s2 !== peg$FAILED) {\n            s1 = input.substring(s1, peg$currPos);\n          } else {\n            s1 = s2;\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c21(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            s2 = [];\n            if (input.charCodeAt(peg$currPos) === 33) {\n              s3 = peg$c18;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                if (input.charCodeAt(peg$currPos) === 33) {\n                  s3 = peg$c18;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                }\n              }\n            } else {\n              s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n              s1 = input.substring(s1, peg$currPos);\n            } else {\n              s1 = s2;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$currPos;\n              s3 = peg$parseVariable();\n              if (s3 !== peg$FAILED) {\n                s2 = input.substring(s2, peg$currPos);\n              } else {\n                s2 = s3;\n              }\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c22(s1, s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseDigit();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c23(s1);\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$currPos;\n                s2 = [];\n                if (input.charCodeAt(peg$currPos) === 33) {\n                  s3 = peg$c18;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                }\n                if (s3 !== peg$FAILED) {\n                  while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    if (input.charCodeAt(peg$currPos) === 33) {\n                      s3 = peg$c18;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                    }\n                  }\n                } else {\n                  s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                  s1 = input.substring(s1, peg$currPos);\n                } else {\n                  s1 = s2;\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parseDigit();\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c24(s1, s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseVariable() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      if (peg$c26.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        if (peg$c28.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\n        }\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          if (peg$c28.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c29); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c30(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c25); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseDigit() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (peg$c32.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c33); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c34(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c31); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c36.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c37); }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n\n      return s0;\n    }\n\n\n        var getExpression = function (rest) {\n            var expr = [];\n            rest.forEach(function (elem) {\n                expr.push(elem[3]);\n            });\n            return expr;\n        };\n\n        var exclamationPointsAreEven = function (str) {\n            return (str.match(/!/g) || []).length % 2 == 0;\n        };\n\n        var varsNames = new Set();\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(\n        null,\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** D:/Education/LogicAndAlgorithmTheory/LogicCalculator/lib/parser.js\n **/"],"sourceRoot":""}